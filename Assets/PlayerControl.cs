//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""BasicControl"",
            ""id"": ""93aa5daf-cb6e-45e4-a315-bfe9e93af69a"",
            ""actions"": [
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""d0d79808-774d-4d46-a0d9-bd23b1a8c041"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""3fbafc4d-fdd3-4a3c-a79d-97ee6618e9ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""305941ad-2e5a-44af-932b-3214a6810ff7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""fc9c069f-183b-4580-97e6-0a0cbed54f15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""c1c13f34-cd70-4542-bc30-fffc35fe027c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""acff50cf-f2a8-4e2b-87d4-4f4495acfa2d"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0d94a70-24fe-4b8f-b728-a407d8cbd460"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1303b94-4310-4ab8-955c-f8940c80c3ef"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4b2a797-1dcb-4a12-9a05-fce20bb484e9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6da808d-bbbf-4995-ade3-ef243539ff00"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BasicControl
        m_BasicControl = asset.FindActionMap("BasicControl", throwIfNotFound: true);
        m_BasicControl_Action = m_BasicControl.FindAction("Action", throwIfNotFound: true);
        m_BasicControl_Up = m_BasicControl.FindAction("Up", throwIfNotFound: true);
        m_BasicControl_Down = m_BasicControl.FindAction("Down", throwIfNotFound: true);
        m_BasicControl_Left = m_BasicControl.FindAction("Left", throwIfNotFound: true);
        m_BasicControl_Right = m_BasicControl.FindAction("Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasicControl
    private readonly InputActionMap m_BasicControl;
    private IBasicControlActions m_BasicControlActionsCallbackInterface;
    private readonly InputAction m_BasicControl_Action;
    private readonly InputAction m_BasicControl_Up;
    private readonly InputAction m_BasicControl_Down;
    private readonly InputAction m_BasicControl_Left;
    private readonly InputAction m_BasicControl_Right;
    public struct BasicControlActions
    {
        private @PlayerControl m_Wrapper;
        public BasicControlActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Action => m_Wrapper.m_BasicControl_Action;
        public InputAction @Up => m_Wrapper.m_BasicControl_Up;
        public InputAction @Down => m_Wrapper.m_BasicControl_Down;
        public InputAction @Left => m_Wrapper.m_BasicControl_Left;
        public InputAction @Right => m_Wrapper.m_BasicControl_Right;
        public InputActionMap Get() { return m_Wrapper.m_BasicControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicControlActions set) { return set.Get(); }
        public void SetCallbacks(IBasicControlActions instance)
        {
            if (m_Wrapper.m_BasicControlActionsCallbackInterface != null)
            {
                @Action.started -= m_Wrapper.m_BasicControlActionsCallbackInterface.OnAction;
                @Action.performed -= m_Wrapper.m_BasicControlActionsCallbackInterface.OnAction;
                @Action.canceled -= m_Wrapper.m_BasicControlActionsCallbackInterface.OnAction;
                @Up.started -= m_Wrapper.m_BasicControlActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_BasicControlActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_BasicControlActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_BasicControlActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_BasicControlActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_BasicControlActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_BasicControlActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_BasicControlActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_BasicControlActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_BasicControlActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_BasicControlActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_BasicControlActionsCallbackInterface.OnRight;
            }
            m_Wrapper.m_BasicControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Action.started += instance.OnAction;
                @Action.performed += instance.OnAction;
                @Action.canceled += instance.OnAction;
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
            }
        }
    }
    public BasicControlActions @BasicControl => new BasicControlActions(this);
    public interface IBasicControlActions
    {
        void OnAction(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
}
